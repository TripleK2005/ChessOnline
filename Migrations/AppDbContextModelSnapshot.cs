// <auto-generated />
using System;
using ChessOnline.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChessOnline.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChessOnline.Models.Chat", b =>
                {
                    b.Property<int>("ChatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameID")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ChatID");

                    b.HasIndex("GameID");

                    b.HasIndex("UserID");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("ChessOnline.Models.Game", b =>
                {
                    b.Property<int>("GameID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameID"));

                    b.Property<int>("BlackPlayerID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WhitePlayerID")
                        .HasColumnType("int");

                    b.HasKey("GameID");

                    b.HasIndex("BlackPlayerID");

                    b.HasIndex("WhitePlayerID");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("ChessOnline.Models.Move", b =>
                {
                    b.Property<int>("MoveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MoveID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromSquare")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameID")
                        .HasColumnType("int");

                    b.Property<int>("MoveNumber")
                        .HasColumnType("int");

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<string>("Promotion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToSquare")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MoveID");

                    b.HasIndex("GameID");

                    b.HasIndex("PlayerID");

                    b.ToTable("Moves");
                });

            modelBuilder.Entity("ChessOnline.Models.Report", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GameID")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportedUserID")
                        .HasColumnType("int");

                    b.Property<int>("ReporterID")
                        .HasColumnType("int");

                    b.HasKey("ReportID");

                    b.HasIndex("GameID");

                    b.HasIndex("ReportedUserID");

                    b.HasIndex("ReporterID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("ChessOnline.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ChessOnline.Models.Chat", b =>
                {
                    b.HasOne("ChessOnline.Models.Game", "Game")
                        .WithMany("Chats")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChessOnline.Models.User", "User")
                        .WithMany("Chats")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChessOnline.Models.Game", b =>
                {
                    b.HasOne("ChessOnline.Models.User", "BlackPlayer")
                        .WithMany("GamesAsBlack")
                        .HasForeignKey("BlackPlayerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChessOnline.Models.User", "WhitePlayer")
                        .WithMany("GamesAsWhite")
                        .HasForeignKey("WhitePlayerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BlackPlayer");

                    b.Navigation("WhitePlayer");
                });

            modelBuilder.Entity("ChessOnline.Models.Move", b =>
                {
                    b.HasOne("ChessOnline.Models.Game", "Game")
                        .WithMany("Moves")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChessOnline.Models.User", "Player")
                        .WithMany("Moves")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("ChessOnline.Models.Report", b =>
                {
                    b.HasOne("ChessOnline.Models.Game", "Game")
                        .WithMany("Reports")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ChessOnline.Models.User", "ReportedUser")
                        .WithMany("ReportsReceived")
                        .HasForeignKey("ReportedUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChessOnline.Models.User", "Reporter")
                        .WithMany("ReportsMade")
                        .HasForeignKey("ReporterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("ReportedUser");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("ChessOnline.Models.Game", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Moves");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("ChessOnline.Models.User", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("GamesAsBlack");

                    b.Navigation("GamesAsWhite");

                    b.Navigation("Moves");

                    b.Navigation("ReportsMade");

                    b.Navigation("ReportsReceived");
                });
#pragma warning restore 612, 618
        }
    }
}
